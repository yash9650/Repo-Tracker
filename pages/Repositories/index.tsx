import Head from "next/head";
import React from "react";
import {
  GetServerSideProps,
  GetStaticPaths,
  GetStaticProps,
  NextPage,
} from "next";
import CustomCard from "../../components/common/CustomCard";
import AddNewRepositoryForm from "../../components/Repositories/AddNewRepositoryForm";
import { IRepo } from "../../models/Repository";
import { Card } from "react-bootstrap";
import moment from "moment";
import { useRouter } from "next/router";
import appAxios, { AppAxiosResponse } from "../../axios/AppAxios";
import { getCookies, setCookie } from "cookies-next";

const RepositoriesPage: NextPage<{
  repoList: IRepo[];
}> = (props) => {
  const router = useRouter();
  return (
    <>
      <Head>
        <title>Repo Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        {props.repoList.map((repo, index) => (
          <CustomCard key={index}>
            <div className="custom-card-container">
              <div
                className="custom-card-body"
                onClick={() => {
                  router.push(`/Repositories/${repo._id}`);
                }}
              >
                <Card.Title>{repo.repoName}</Card.Title>

                <Card.Text>
                  <b>Created at: </b>
                  {moment(repo.createdAt).format("LL")}
                </Card.Text>
              </div>
              <div className="card-btn-container">
                <button
                  className="btn btn-primary fs-small"
                  onClick={(event) => {
                    event.stopPropagation();
                  }}
                >
                  edit
                </button>
                <br />
                <button
                  className="btn btn-danger fs-small"
                  onClick={(event) => {}}
                >
                  del
                </button>
              </div>
            </div>
          </CustomCard>
        ))}
      </div>
      <AddNewRepositoryForm />
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  try {
    const repoResponse: AppAxiosResponse<[IRepo]> = await appAxios(
      "api/repositories"
    );
    if (repoResponse.data.success) {
      return {
        props: {
          repoList: repoResponse.data.data,
        },
      };
    }
  } catch (error) {
    console.log(error.response.data);
  }
  return {
    props: {
      repoList: [],
    },
  };
};

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   // const user = await appAxios({
//   //   url: "/api/auth/register",
//   //    method: "POST",
//   //   data: {
//   //     username: "test",
//   //     password: "password",
//   //     role: "admin",
//   //   },
//   // });

//   return {
//     props: {
//       repoList: [],
//     },
//   };
// };

export default RepositoriesPage;

// ----> login logic
// try {
//   const loginResponse: AppAxiosResponse = await appAxios({
//     url: "/api/cookie",
//     method: "POST",
//     data: {
//       username: "Yash",
//       password: "password",
//     },
//   });
//   // setCookie("auth", loginResponse.data.data, {
//   //   res: context.res,
//   //   req: context.req,
//   //   httpOnly: true,
//   //   secure: process.env.NODE_ENV !== "development",
//   //   sameSite: "strict",
//   //   path: "/",
//   // });
// } catch (error) {}
